#! /usr/bin/python3
# -*- coding: utf-8 -*-
'''
    Control Goodcrypto Mail

    Copyright 2014-2016 GoodCrypto
    Last modified: 2016-10-31
'''
# limit the path to known locations
from os import environ
environ['PATH'] = '/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'

PYTHON = '/usr/bin/python3'

import argparse, os, sh, traceback
from time import sleep

# set up django early
from goodcrypto.utils import gc_django
gc_django.setup()

from goodcrypto.mail.crypto_queue_settings import CRYPTO_RQ, CRYPTO_REDIS_PORT
from goodcrypto.mail.message_queue_settings import MESSAGE_RQ, MESSAGE_REDIS_PORT
from goodcrypto.mail.utils import is_mail_running
from goodcrypto.system.special_queue_settings import SPECIAL_RQ, SPECIAL_REDIS_PORT
from goodcrypto.utils.manage_queues import clear_failed_queue
import syr.log

log = syr.log.get_log()

NAME = 'goodcrypto mail'
GOODCRYPTO_SERVER = '/var/local/projects/goodcrypto/server'
GOODCRYPTO_SERVER_SRC = os.path.join(GOODCRYPTO_SERVER, 'src')
GOODCRYPTO_MAIL_TOOLS = os.path.join(GOODCRYPTO_SERVER_SRC, 'mail', 'tools')
GOODCRYPTO_OCE_TOOLS = os.path.join(GOODCRYPTO_SERVER_SRC, 'oce', 'tools')
GOODCRYPTO_SYSTEM_TOOLS = os.path.join(GOODCRYPTO_SERVER_SRC, 'system', 'tools')
GOODCRYPTO_LOGS = '/var/local/log/goodcrypto/*'

def show_stderr(line):
    line = line.rstrip()
    print(line)
    log.error(line)

def start():
    sh.redis_server('/etc/redis/redis_message.conf', _bg=True)
    sh.redis_server('/etc/redis/redis_gpg.conf', _bg=True)
    sh.redis_server('/etc/redis/redis_crypto.conf', _bg=True)
    sh.redis_server('/etc/redis/redis_special.conf', _bg=True)

    os.chdir(GOODCRYPTO_MAIL_TOOLS)
    sh.supervise('goodcrypto_crypto', _bg=True)
    sh.supervise('goodcrypto_message', _bg=True)
    sh.supervise('goodcrypto_bundle', _bg=True)

    os.chdir(GOODCRYPTO_OCE_TOOLS)
    sh.supervise('goodcrypto_gpg', _bg=True)

    os.chdir(GOODCRYPTO_SYSTEM_TOOLS)
    sh.supervise('goodcrypto_special', _bg=True)
    sh.supervise('goodcrypto_updates', _bg=True)

    # make sure all of the goodcrypto logs are owned by goodcrypto
    sh.chown('--recursive', 'goodcrypto:goodcrypto', sh.glob(GOODCRYPTO_LOGS))
    
    sleep(5)
    if is_mail_running():
        status()
    else:
        output('could not start {}'.format(NAME))

def stop():
    # remove any jobs that were in rq but didn't finish
    clear_failed_queue(MESSAGE_RQ, MESSAGE_REDIS_PORT)
    clear_failed_queue(CRYPTO_RQ, CRYPTO_REDIS_PORT)
    clear_failed_queue(SPECIAL_RQ, SPECIAL_REDIS_PORT)
    #sh.sudo('-u', 'goodcrypto', PYTHON, os.path.join(GOODCRYPTO_OCE_TOOLS, 'clear_failed_crypto_queue.py'), 'GPG')

    stop_supervise('goodcrypto_special', GOODCRYPTO_SYSTEM_TOOLS)
    stop_supervise('goodcrypto_updates', GOODCRYPTO_SYSTEM_TOOLS)
    stop_supervise('goodcrypto_bundle', GOODCRYPTO_MAIL_TOOLS)
    stop_supervise('goodcrypto_message', GOODCRYPTO_MAIL_TOOLS)
    stop_supervise('goodcrypto_crypto', GOODCRYPTO_MAIL_TOOLS)
    stop_supervise('goodcrypto_gpg', GOODCRYPTO_OCE_TOOLS)
    sh.killmatch('"/usr/local/bin/rq worker"')

    # remove redis and its data files
    sh.killmatch('redis')
    sh.rm('-fr', sh.glob(os.path.join(GOODCRYPTO_SERVER, 'data/redis/*')))

    sleep(2)
    if is_mail_running():
        output('could not stop {}'.format(NAME))
    else:
        status()

def restart():
    stop()
    start()

def status():
    if is_mail_running():
        output('{} is running'.format(NAME))
    else:
        output('{} stopped'.format(NAME))

def stop_supervise(program, parent_dir):

    sh.killmatch('"supervise {}"'.format(program))

    lock_file = os.path.join(parent_dir, program, 'supervise', 'lock')
    if os.path.exists(lock_file):
        sh.rm(lock_file)

def kill(program):
    try:
        log('sh.pkill({})'.format(program))
        sh.pkill('--full', '--signal', 'TERM', program)
    # it's okay if the process is gone
    except sh.ErrorReturnCode_1:
        pass
    # we just asked for Signal 15
    except sh.SignalException_15:
        pass
    except:
        log.debug(traceback.format_exc())
        raise

def output(msg):
    log.debug(msg)
    print(msg)

def main ():
    parser = argparse.ArgumentParser(description='Control Goodcrypto Mail.')
    parser.add_argument('command', choices=['start', 'stop', 'restart', 'status'])

    args = parser.parse_args()

    if 'start' == args.command:
        start()

    elif 'stop' == args.command:
        stop()

    elif 'restart' == args.command:
        restart()

    elif 'status' == args.command:
        status()

    else:
        parser.print_help()

if __name__ == '__main__':
    main()

